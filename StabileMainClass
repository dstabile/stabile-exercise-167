//Dominic Stabile
//cpt167
//This program determines a discount based on user input 
//12/04/21
package edu.cpt167.stabile.exercise6;

import java.util.Scanner;

public class StabileMainClass 
{
	//declare and initialize all CLASS CONSTANTS
	public static final double TAX_RATE = .075;
	public static final String DISCOUNT_NAME_MEMBER = "Member";
	public static final String DISCOUNT_NAME_SENIOR = "Senior";
	public static final String DISCOUNT_NAME_NONE = "No Discount";
	public static final String DISCOUNT_NAME_QUIT = "Quit";
	public static final double DISCOUNT_RATE_MEMBER = 0.15;
	public static final double DISCOUNT_RATE_SENIOR = 0.25;
	public static final double DISCOUNT_RATE_NONE = 0.0;
	public static final String ITEM_NAME_PREMIUM = "Premium";
	public static final String ITEM_NAME_SPECIAL = "Special";
	public static final String ITEM_NAME_BASIC = "Basic";
	public static final String ITEM_NAME_RETURN = "Return to Main Menu";
	public static final double ITEM_PRICE_PREMIUM = 55.95;
	public static final double ITEM_PRICE_SPECIAL = 24.95;
	public static final double ITEM_PRICE_BASIC = 15.95;
	public static final int RESET_VALUE = 0;

	public static void main(String[] args) 
	{
		//INTRODUCTIN section
		//declare and initialize the scanner
		Scanner input = new Scanner(System.in);
		
		//declare and initialize all local variables
		String userName = "";
		char rateSelection = ' ';
		char itemSelection = ' ';
		int howMany = 0;
		String discountName = "";
		double discountRate = 0.0;
		String itemName = "";
		double itemPrice = 0.0;
		double discountAmount = 0.0;
		double discountPrice = 0.0;
		double subTotal = 0.0;
		double tax = 0.0;
		double totalCost = 0.0;
		int memberCount = 0;
		int seniorCount = 0;
		int noDiscountCount = 0;
		double grandTotal = 0.0;
		int premiumCount = 0;
		int specialCount = 0;
		int basicCount = 0;
		double purchaseAmt = 0.0;
		
		//display welcome banner
		displayWelcomeBanner();
		
		//INPUT section
		
		//prompts user for their name and stores the value in userName
		userName = getUserName(input);
		
		//displays menu and retrieves user input, storing the input in rateSelection
		rateSelection = validateMainMenu(input);
		
		//run-while loop, which will hold nested run-while loop
		while(rateSelection != 'Q')
		{
			//assignment statement
			itemSelection = validateItemMenu(input);
			
			//nested run-while loop will hold 90% of code
			while(itemSelection != 'R')
			{
				howMany = validateHowMany(input);
				
				//PROCESS section
				//test to determine user's discount
				if (rateSelection == 'A')
				{
					//assignment statements
					discountName = 	DISCOUNT_NAME_MEMBER;
					discountRate = DISCOUNT_RATE_MEMBER;
					//increment counter
					memberCount++;
				}//end of if
				else if (rateSelection == 'B')
				{
					//assignment statements
					discountName = DISCOUNT_NAME_SENIOR;
					discountRate = DISCOUNT_RATE_SENIOR;
					//increment counter
					seniorCount++; 
				}//end of else if
				else
				{
					//assignment statements
					discountName = DISCOUNT_NAME_NONE;
					discountRate = DISCOUNT_RATE_NONE;
					//increment counter
					noDiscountCount++; 
				}//end of else
				
				//test to determine user's item selection
				if (itemSelection == 'A')
				{
					//assignment statements
					itemName = ITEM_NAME_PREMIUM;
					itemPrice = ITEM_PRICE_PREMIUM;
					//increment counter
					premiumCount++; 
				}//end of if
				else if (itemSelection == 'B')
				{
					//assignment statements
					itemName = ITEM_NAME_SPECIAL;
					itemPrice = ITEM_PRICE_SPECIAL;
					//increment counter
					specialCount++;
				}//end of else if
				else
				{
					//assignment statements
					itemName = ITEM_NAME_BASIC;
					itemPrice = ITEM_PRICE_BASIC;
					//increment counter
					basicCount++;
				}//end of else
				
				//process figures for item receipt
				discountAmount = itemPrice * discountRate;
				discountPrice = itemPrice - discountAmount;
				purchaseAmt = howMany * discountPrice;
				subTotal = subTotal + purchaseAmt;
				
				//display item receipt
				displayItemReceipt(itemName, itemPrice, discountName, discountRate,
						discountAmount, discountPrice, howMany, purchaseAmt, subTotal);
				
				//display item menu again
				itemSelection = validateItemMenu(input);
			}//end of nested run-while loop
			 
			//process grand total
			tax = subTotal * TAX_RATE;
			totalCost = subTotal + tax;
			grandTotal = grandTotal + totalCost;

			//display order total
			displayOrderTotal(userName, subTotal, tax, totalCost);

			//reset subTotal to 0
			subTotal = RESET_VALUE;

			//display main menu again
			rateSelection = validateMainMenu(input);

		


	}//end of run-while loop
		
		//output selection structure
		//test to see if report should be printed
		if (grandTotal > 0.0)
		{
			//calling displayFinalReport function
			displayFinalReport(memberCount, seniorCount, 
					noDiscountCount, premiumCount, specialCount, basicCount,
					grandTotal);
		}// end of if
	
			displayFarewellMessage(userName);
			
			//close scanner
			input.close();
}//end of main method
	
	//void method section
	
	//void method, display welcome banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the DISCOUNT CALCULATOR Program!");
		System.out.println("This program will determine your discount");
		System.out.println("based on your selections");
		System.out.println("***** ***** ***** ***** ***** ***** ***** ***** ***** *****");
	}//end of void method to display welcome banner
	
	//void method, display farewell message
	public static void displayFarewellMessage(String borrowedUserName)
	{
		System.out.println("***** ***** ***** ***** ***** ***** ***** ***** ***** *****");
		System.out.println(borrowedUserName + ", thanks so much");
		System.out.println("for using our DISCOUNT CALCULATOR Program!");
		System.out.println("Have a good one!");
		System.out.println("***** ***** ***** ***** ***** ***** ***** ***** ***** *****");
	}//end of void method to display farewell message
	
	//void method, display item receipt
	public static void displayItemReceipt(String borrowedItemName, double
			borrowedItemPrice, String borrowedDiscountName, double borrowedDiscountRate, double
			borrowedDiscountAmount, double borrowedDiscountPrice, int borrowedHowMany, double 
			borrowedPurchaseAmt, double borrowedSubTotal)
	{
		//menu
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ITEM REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-23s%-7s\n", "Item Name", borrowedItemName);
		System.out.printf("%-20s%4s%7.2f\n", "Original Price", "$", borrowedItemPrice);
		System.out.printf("%-23s%-7s\n", "Discount Type" , borrowedDiscountName);	
		System.out.printf("%-19s%4s%7.1f%1s\n", "Discount Rate", "", borrowedDiscountRate * 100, "%");
		System.out.printf("%-20s%4s%7.2f\n", "Discount Amount", "$", borrowedDiscountAmount);
		System.out.printf("%-20s%4s%7.2f\n", "Discounted Price", "$", borrowedDiscountPrice);
		System.out.printf("%-20s%4s%7d\n", "Quantity", "", borrowedHowMany);
		System.out.printf("%-20s%4s%7.2f\n", "Purchase Amount", "$", borrowedPurchaseAmt);
		System.out.printf("%-20s%4s%7.2f\n", "Subtotal", "$", borrowedSubTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");
	}//end of void method to display item report
	
	//void method, display order report
	public static void displayOrderTotal(String borrowedUserName, double borrowedSubTotal, 
			double borrowedTax, double borrowedTotalCost)
	{
		//menu
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-23s%-7s\n", "User", borrowedUserName);
		System.out.printf("%-20s%4s%7.2f\n", "Subtotal", "$", borrowedSubTotal);
		System.out.printf("%-20s%4s%7.2f\n", "Tax", "$", borrowedTax);
		System.out.printf("%-20s%4s%7.2f\n", "Total Cost", "$", borrowedTotalCost);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//end of void method to display order report
	
	//void method, display final report
	public static void displayFinalReport(int borrowedMemberCount, int borrowedSeniorCount, 
			int borrowedNoDiscountCount, int borrowedPremiumCount, int borrowedSpecialCount,
			int borrowedBasicCount, double borrowedGrandTotal)
	{
		//menu
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Count of discount types:");
		System.out.printf("%-12s%8d\n", DISCOUNT_NAME_MEMBER, borrowedMemberCount);
		System.out.printf("%-12s%8d\n", DISCOUNT_NAME_SENIOR, borrowedSeniorCount);
		System.out.printf("%-12s%8d\n", DISCOUNT_NAME_NONE, borrowedNoDiscountCount);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Count of item types:");
		System.out.printf("%-12s%8d\n", ITEM_NAME_PREMIUM, borrowedPremiumCount);
		System.out.printf("%-12s%8d\n", ITEM_NAME_SPECIAL, borrowedSpecialCount);
		System.out.printf("%-12s%8d\n", ITEM_NAME_BASIC, borrowedBasicCount);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-11s%2s%7.2f\n", "Grand Total", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//end of void method to display final report
	
	public static void displayMainMenu()
	{
		//display menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		System.out.printf("%-8s%-14s%4.1f%1s\n", "[A] for", DISCOUNT_NAME_MEMBER, DISCOUNT_RATE_MEMBER * 100, "%");
		System.out.printf("%-8s%-14s%4.1f%1s\n", "[B] for", DISCOUNT_NAME_SENIOR, DISCOUNT_RATE_SENIOR * 100, "%");
		System.out.printf("%-8s%-14s%4.1f%1s\n", "[C] for", DISCOUNT_NAME_NONE, DISCOUNT_RATE_NONE, "%");
		System.out.printf("%-8s%-5s\n", "[Q] to", DISCOUNT_NAME_QUIT);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		//prompt for menu selection
		System.out.print("Enter selection here:"); 
	}//end of void method to display main menu
	
	public static void displayItemMenu()
	{
	//display menu
	System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	System.out.println("ITEM MENU");
	System.out.printf("%-8s%-14s%2s%4.1f\n", "[A] for", ITEM_NAME_PREMIUM, "$", ITEM_PRICE_PREMIUM);
	System.out.printf("%-8s%-14s%2s%4.1f\n", "[B] for", ITEM_NAME_SPECIAL, "$", ITEM_PRICE_SPECIAL);
	System.out.printf("%-8s%-14s%2s%4.1f\n", "[C] for", ITEM_NAME_BASIC, "$", ITEM_PRICE_BASIC);
	System.out.printf("%-7s%-24s\n", "[R] to", ITEM_NAME_RETURN);
	System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	//prompt for menu selection
	System.out.print("Enter selection here:"); 
	}//end of void method to display item menu
	
	//VR method section
	
	//VR method to retrieve user name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		//prompt user for name
		System.out.print("Please enter your name");
		//assignment statement
		localUserName =  borrowedInput.nextLine();
		return localUserName;
	}//end of VR method to retrieve user name
	
	//VR method to display main menu and validate user selection
	public static char validateMainMenu(Scanner borrowedInput)
	{
		//holds selection
		char rateSelection = ' ';
		
		//display menu
		displayMainMenu();
		//assignment statement
		rateSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//while loop to validate user selection
		while(rateSelection != 'A' && rateSelection != 'B' && rateSelection != 'C' 
				&& rateSelection != 'Q')
		{
			//error message
			System.out.println("\n~~~Invalid selection.~~~\n");
			
			//display menu
			displayMainMenu();
			//assignment statement
			rateSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of while loop to validate rateSelection
		return rateSelection;
	
	}//end of VR method to retrieve and validate user discount selection
	
	//VR method to retrieve user item selection
	public static char validateItemMenu(Scanner borrowedInput)
	{
		//to hold user input
		char localSelection = ' ';
		
		//display menu
		displayItemMenu();
		//assignment statement
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//while loop to validate user input
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'R')
		{
			//error message
			System.out.println("\n~~~Invalid selection.~~~\n");
			
			//display menu
			displayItemMenu();
			//assignment statement
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of while loop to validate localSelection
		
		//return user input to be stored in itemSelection
		return localSelection;
	}//end of VR method to retrieve and validate localSelection
	
	//VR method to retrieve item quantity
	public static int validateHowMany(Scanner borrowedInput)
	{
		//to hold user input
		int localHowMany = 0;
		System.out.print("Please enter the quantity:");
		localHowMany = borrowedInput.nextInt();
		
		//to make sure the user input more than 0
		while(localHowMany <= 0)
		{
			//error message
			System.out.println("\n~~~~Must enter a number greater than 0~~~~\n");
			
			//prompt the user to try again
			System.out.print("Please enter the quantity:");
			//assignment statement
			localHowMany = borrowedInput.nextInt();
		}//end of while loop to validate user input
		
		//return
		return localHowMany;
	}//end of VR method to retrieve localHowMany
	
}//end of class main
